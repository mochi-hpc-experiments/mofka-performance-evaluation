#!/bin/bash
set -e

ulimit -c unlimited
EXP_ENV=exp-env
COV_ENV=cov-env

# work_dir.txt is the only artifact of the setup step
WORK_DIR=$(car work_dir.txt)

SANDBOX=$WORK_DIR/sandbox
source $SANDBOX/bin/util.sh

RESULT_DIR="$WORK_DIR/results/$(date +'%Y-%m-%d')/$(uuidgen | cut -c1-8)"

# profiling
export MARGO_ENABLE_MONITORING=1
export MARGO_MONITORING_FILENAME_PREFIX=$RESULT_DIR/mofka
export MARGO_MONITORING_DISABLE_TIME_SERIES=true

# file names for experiment without coverage
BENCHMARK_CONFIG_FILE=$RESULT_DIR/benchmark.json
BENCHMARK_RESULT_FILE=$RESULT_DIR/result.json
BENCHMARK_GROUP_FILE=$RESULT_DIR/flock.json
# file names for experiment with coverage
BENCHMARK_CONFIG_FILE_COV=$RESULT_DIR/coverage/benchmark.json
BENCHMARK_RESULT_FILE_COV=$RESULT_DIR/coverage/result.json
BENCHMARK_GROUP_FILE_COV=$RESULT_DIR/coverage/flock.json

export GCOV_PREFIX=$RESULT_DIR/coverage

echo "==> Creating result directory $RESULT_DIR"
mkdir -p $RESULT_DIR
mkdir -p $GCOV_PREFIX

echo "==> Copy spack files"
cp $SANDBOX/environments/$EXP_ENV/spack.lock $RESULT_DIR
cp $SANDBOX/environments/$EXP_ENV/spack.yaml $RESULT_DIR
cp $SANDBOX/info.json $RESULT_DIR

# ----------------------------------
# Running benchmark without coverage
# ----------------------------------

echo "==> Sourcing $EXP_ENV environment"
source $SANDBOX/bin/activate-$EXP_ENV.sh

echo "==> Generating benchmark configuration"
BENCHMARK_CONFIG_FILE=$RESULT_DIR/benchmark.json
mofkactl benchmark generate -a cxi --num-servers 2 --num-events 1000 > $BENCHMARK_CONFIG_FILE
cp $BENCHMARK_CONFIG_FILE $BENCHMARK_CONFIG_FILE_COV

echo "==> Changing name of group file in configuration"
sed -i "s#mofka\.flock\.json#$BENCHMARK_GROUP_FILE#g" $BENCHMARK_CONFIG_FILE
sed -i "s#mofka\.flock\.json#$BENCHMARK_GROUP_FILE_COV#g" $BENCHMARK_CONFIG_FILE_COV

# FIXME: Temporary fix: replace any earliest_first pool
#sed -i "s#earliest_first#fifo_wait#g" $BENCHMARK_CONFIG_FILE
#sed -i "s#earliest_first#fifo_wait#g" $BENCHMARK_CONFIG_FILE_COV

echo "==> Running benchmark without coverage"
mpiexec -n 4 --ppn 1 --cpu-bind none mofka-benchmark $BENCHMARK_CONFIG_FILE $BENCHMARK_RESULT_FILE

# json-c 0.13.0 has a bug that incorrectly prints 0 as 0.000000000.0
for file in "$MARGO_MONITORING_FILENAME_PREFIX".*.json; do
    if [[ -f "$file" ]]; then
        sed -i "s/\.000000000\.0/.0/g" $file
    fi
done

# -------------------------------
# Running benchmark with coverage
# -------------------------------

echo "==> Sourcing $COV_ENV environment"
source $SANDBOX/bin/activate-$COV_ENV.sh

unset MARGO_ENABLE_MONITORING
unset MARGO_MONITORING_FILENAME_PREFIX

echo "==> Running benchmark with coverage"
mpiexec -n 4 --ppn 1 --cpu-bind none mofka-benchmark $BENCHMARK_CONFIG_FILE $BENCHMARK_RESULT_FILE_COV

# ------------------------
# Generate coverage report
# ------------------------

MOFKA_SOURCE_PATH=$SANDBOX/mofka
MOFKA_BUILD_PATH=$SANDBOX/mofka-build-coverage/./
GCOVR_OUTPUT_FILE_TXT=$RESULT_DIR/coverage.txt
GCOVR_OUTPUT_FILE_JSON=$RESULT_DIR/coverage.json
COVERAGE_RESULT_PATH=$RESULT_DIR/coverage$SANDBOX/mofka-build-coverage
GCOV_CMD=gcov-12

echo "==> Copying .gcno files"
mkdir -p $COVERAGE_RESULT_PATH
echo "MOFKA_BUILD_PATH=$MOFKA_BUILD_PATH"
echo "COVERAGE_RESULT_PATH=$COVERAGE_RESULT_PATH"
rsync -av --ignore-existing $MOFKA_BUILD_PATH $COVERAGE_RESULT_PATH

pushd $COVERAGE_RESULT_PATH
echo "==> Generating coverage report (text)"
gcovr -r $MOFKA_SOURCE_PATH --txt $GCOVR_OUTPUT_FILE_TXT \
      --gcov-executable $GCOV_CMD \
      --gcov-ignore-errors=no_working_dir_found -v \
      $COVERAGE_RESULT_PATH 1> /dev/null 2>&1
echo "==> Generating coverage report (json)"
gcovr -r $MOFKA_SOURCE_PATH --json $GCOVR_OUTPUT_FILE_JSON \
      --gcov-executable $GCOV_CMD \
      --gcov-ignore-errors=no_working_dir_found \
      $COVERAGE_RESULT_PATH 1> /dev/null 2>&1
popd

echo "==> Deleting coverage files"
rm -rf $RESULT_DIR/coverage

echo "==> Job completed"
